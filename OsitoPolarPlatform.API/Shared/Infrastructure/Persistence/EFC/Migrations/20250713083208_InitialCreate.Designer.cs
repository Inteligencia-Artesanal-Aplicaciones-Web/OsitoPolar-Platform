// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OsitoPolarPlatform.API.Shared.Infrastructure.Persistence.EFC.Configuration;

#nullable disable

namespace OsitoPolarPlatform.API.Shared.Infrastructure.Persistence.EFC.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250713083208_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("OsitoPolarPlatform.API.Analytics.Domain.Model.Aggregates.EquipmentAnalytics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_equipment_analytics");

                    b.HasIndex("EquipmentId")
                        .IsUnique()
                        .HasDatabaseName("i_x_equipment_analytics_equipment_id");

                    b.ToTable("equipment_analytics", (string)null);
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.Analytics.Domain.Model.Entities.DailyTemperatureAverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("AverageTemperature")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("average_temperature");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<decimal>("MaxTemperature")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("max_temperature");

                    b.Property<decimal>("MinTemperature")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("min_temperature");

                    b.HasKey("Id")
                        .HasName("p_k_daily_temperature_averages");

                    b.HasIndex("EquipmentId", "Date")
                        .IsUnique()
                        .HasDatabaseName("i_x_daily_temperature_averages_equipment_id_date");

                    b.ToTable("daily_temperature_averages", (string)null);
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.Analytics.Domain.Model.Entities.EnergyReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Consumption")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("consumption");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("unit");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_energy_readings");

                    b.HasIndex("EquipmentId", "Timestamp")
                        .HasDatabaseName("i_x_energy_readings_equipment_id_timestamp");

                    b.ToTable("energy_readings", (string)null);
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.Analytics.Domain.Model.Entities.TemperatureReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("temperature");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_temperature_readings");

                    b.HasIndex("EquipmentId", "Timestamp")
                        .HasDatabaseName("i_x_temperature_readings_equipment_id_timestamp");

                    b.ToTable("temperature_readings", (string)null);
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.Aggregates.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cost");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CurrentTemperature")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("current_temperature");

                    b.Property<DateTimeOffset>("InstallationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("installation_date");

                    b.Property<bool>("IsPoweredOn")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_powered_on");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("notes");

                    b.Property<decimal>("OptimalTemperatureMax")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("optimal_temperature_max");

                    b.Property<decimal>("OptimalTemperatureMin")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("optimal_temperature_min");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<string>("OwnerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("owner_type");

                    b.Property<string>("OwnershipType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ownership_type");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("serial_number");

                    b.Property<decimal>("SetTemperature")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("set_temperature");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("TechnicalDetails")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("technical_details");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_equipment");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("i_x_equipment_code");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasDatabaseName("i_x_equipment_serial_number");

                    b.ToTable("equipment");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.IAM.Domain.Model.Aggregates.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("subscription_id");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("p_k_users");

                    b.ToTable("users");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.Profiles.Domain.Model.Aggregates.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_profiles");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.ServiceRequests.Domain.Model.Aggregates.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("ActualCompletionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("actual_completion_date");

                    b.Property<int?>("AssignedTechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_technician_id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cost");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("CustomerFeedbackRating")
                        .HasColumnType("int")
                        .HasColumnName("customer_feedback_rating");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("DesiredCompletionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("desired_completion_date");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<DateTimeOffset?>("FeedbackSubmissionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("feedback_submission_date");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_emergency");

                    b.Property<string>("IssueDetails")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("issue_details");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("order_number");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("priority");

                    b.Property<DateTimeOffset>("RequestTime")
                        .HasColumnType("datetime")
                        .HasColumnName("request_time");

                    b.Property<string>("ResolutionDetails")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("resolution_details");

                    b.Property<DateTimeOffset?>("ScheduledDate")
                        .HasColumnType("datetime")
                        .HasColumnName("scheduled_date");

                    b.Property<string>("ServiceAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("service_address");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("service_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("TechnicianNotes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("technician_notes");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("time_slot");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("Urgency")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("urgency");

                    b.HasKey("Id")
                        .HasName("p_k_service_requests");

                    b.HasIndex("AssignedTechnicianId")
                        .HasDatabaseName("i_x_service_requests_assigned_technician_id");

                    b.HasIndex("EquipmentId")
                        .HasDatabaseName("i_x_service_requests_equipment_id");

                    b.ToTable("service_requests");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.SubscriptionsAndPayments.Domain.Model.Aggregates.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("billing_cycle");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int?>("MaxClients")
                        .HasColumnType("int")
                        .HasColumnName("max_clients");

                    b.Property<int?>("MaxEquipment")
                        .HasColumnType("int")
                        .HasColumnName("max_equipment");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("plan_name");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_subscriptions");

                    b.ToTable("subscriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingCycle = "Monthly",
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxEquipment = 6,
                            PlanName = "Basic (Polar Bear) - $18.99/month - Up to 6 units",
                            UpdatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            BillingCycle = "Monthly",
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxEquipment = 12,
                            PlanName = "Standard (Snow Bear) - $35.13/month - Up to 12 units",
                            UpdatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            BillingCycle = "Monthly",
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxEquipment = 24,
                            PlanName = "Premium (Glacial Bear) - $67.56/month - Up to 24 units",
                            UpdatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            BillingCycle = "Monthly",
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxClients = 10,
                            PlanName = "Small Company - $40.51/month - Up to 10 clients",
                            UpdatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            BillingCycle = "Monthly",
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxClients = 30,
                            PlanName = "Medium Company - $81.08/month - Up to 30 clients",
                            UpdatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            BillingCycle = "Monthly",
                            CreatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxClients = 999999,
                            PlanName = "Enterprise Premium - $162.16/month - Unlimited clients",
                            UpdatedDate = new DateTimeOffset(new DateTime(2025, 7, 13, 8, 32, 7, 615, DateTimeKind.Unspecified).AddTicks(7641), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.WorkOrders.Domain.Model.Aggregates.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("ActualCompletionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("actual_completion_date");

                    b.Property<int?>("AssignedTechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_technician_id");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cost");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetime")
                        .HasColumnName("creation_time");

                    b.Property<int?>("CustomerFeedbackRating")
                        .HasColumnType("int")
                        .HasColumnName("customer_feedback_rating");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("DesiredCompletionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("desired_completion_date");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<DateTimeOffset?>("FeedbackSubmissionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("feedback_submission_date");

                    b.Property<string>("IssueDetails")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("issue_details");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("priority");

                    b.Property<string>("ResolutionDetails")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("resolution_details");

                    b.Property<DateTimeOffset?>("ScheduledDate")
                        .HasColumnType("datetime")
                        .HasColumnName("scheduled_date");

                    b.Property<string>("ServiceAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("service_address");

                    b.Property<int?>("ServiceRequestId")
                        .HasColumnType("int")
                        .HasColumnName("service_request_id");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int")
                        .HasColumnName("service_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<string>("TechnicianNotes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("technician_notes");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("time_slot");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("WorkOrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("work_order_number");

                    b.HasKey("Id")
                        .HasName("p_k_work_orders");

                    b.HasIndex("AssignedTechnicianId")
                        .HasDatabaseName("i_x_work_orders_assigned_technician_id");

                    b.HasIndex("EquipmentId")
                        .HasDatabaseName("i_x_work_orders_equipment_id");

                    b.HasIndex("ServiceRequestId")
                        .HasDatabaseName("i_x_work_orders_service_request_id");

                    b.HasIndex("WorkOrderNumber")
                        .IsUnique()
                        .HasDatabaseName("i_x_work_orders_work_order_number");

                    b.ToTable("work_orders");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.bc_technicians.Domain.Model.Entities.Technician", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("availability");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("rating");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("specialization");

                    b.HasKey("Id")
                        .HasName("p_k_technicians");

                    b.ToTable("technicians");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.Analytics.Domain.Model.Aggregates.EquipmentAnalytics", b =>
                {
                    b.HasOne("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.Aggregates.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k__analytics__equipment");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.Analytics.Domain.Model.Entities.DailyTemperatureAverage", b =>
                {
                    b.HasOne("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.Aggregates.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k__daily_avg__equipment");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.Analytics.Domain.Model.Entities.EnergyReading", b =>
                {
                    b.HasOne("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.Aggregates.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k__energy_reading__equipment");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.Analytics.Domain.Model.Entities.TemperatureReading", b =>
                {
                    b.HasOne("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.Aggregates.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k__temp_reading__equipment");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.Aggregates.Equipment", b =>
                {
                    b.OwnsOne("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.Entities.EnergyConsumption", "EnergyConsumption", b1 =>
                        {
                            b1.Property<int>("EquipmentId")
                                .HasColumnType("int")
                                .HasColumnName("equipment_id");

                            b1.Property<decimal>("Average")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("energy_consumption_average");

                            b1.Property<decimal>("Current")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("energy_consumption_current");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasColumnName("energy_consumption_unit");

                            b1.HasKey("EquipmentId")
                                .HasName("p_k_equipment");

                            b1.ToTable("equipment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentId")
                                .HasConstraintName("f_k_equipment_equipment_equipment_id");
                        });

                    b.OwnsOne("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<int>("EquipmentId")
                                .HasColumnType("int")
                                .HasColumnName("equipment_id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("varchar(255)")
                                .HasColumnName("location_address");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(100)")
                                .HasColumnName("location_name");

                            b1.HasKey("EquipmentId")
                                .HasName("p_k_equipment");

                            b1.ToTable("equipment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentId")
                                .HasConstraintName("f_k_equipment_equipment_equipment_id");

                            b1.OwnsOne("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.ValueObjects.Coordinates", "Coordinates", b2 =>
                                {
                                    b2.Property<int>("equipment_id")
                                        .HasColumnType("int")
                                        .HasColumnName("equipment_id");

                                    b2.Property<decimal>("Latitude")
                                        .HasColumnType("decimal(10,8)")
                                        .HasColumnName("location_latitude");

                                    b2.Property<decimal>("Longitude")
                                        .HasColumnType("decimal(11,8)")
                                        .HasColumnName("location_longitude");

                                    b2.HasKey("equipment_id")
                                        .HasName("p_k_equipment");

                                    b2.ToTable("equipment");

                                    b2.WithOwner()
                                        .HasForeignKey("equipment_id")
                                        .HasConstraintName("f_k_equipment_equipment_equipment_id");
                                });

                            b1.Navigation("Coordinates")
                                .IsRequired();
                        });

                    b.OwnsOne("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.Entities.RentalInfo", "RentalInfo", b1 =>
                        {
                            b1.Property<int>("EquipmentId")
                                .HasColumnType("int")
                                .HasColumnName("equipment_id");

                            b1.Property<DateTimeOffset>("EndDate")
                                .HasColumnType("datetime")
                                .HasColumnName("rental_end_date");

                            b1.Property<decimal>("MonthlyFee")
                                .HasColumnType("decimal(10,2)")
                                .HasColumnName("rental_monthly_fee");

                            b1.Property<int>("ProviderId")
                                .HasColumnType("int")
                                .HasColumnName("rental_provider_id");

                            b1.Property<DateTimeOffset>("StartDate")
                                .HasColumnType("datetime")
                                .HasColumnName("rental_start_date");

                            b1.HasKey("EquipmentId")
                                .HasName("p_k_equipment");

                            b1.ToTable("equipment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentId")
                                .HasConstraintName("f_k_equipment_equipment_equipment_id");
                        });

                    b.OwnsOne("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.ValueObjects.EquipmentIdentifier", "EquipmentIdentifier", b1 =>
                        {
                            b1.Property<int>("EquipmentId")
                                .HasColumnType("int")
                                .HasColumnName("equipment_id");

                            b1.Property<Guid>("Identifier")
                                .HasColumnType("char(36)")
                                .HasColumnName("equipment_identifier");

                            b1.HasKey("EquipmentId")
                                .HasName("p_k_equipment");

                            b1.ToTable("equipment");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentId")
                                .HasConstraintName("f_k_equipment_equipment_equipment_id");
                        });

                    b.Navigation("EnergyConsumption")
                        .IsRequired();

                    b.Navigation("EquipmentIdentifier")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("RentalInfo");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.Profiles.Domain.Model.Aggregates.Profile", b =>
                {
                    b.OwnsOne("OsitoPolarPlatform.API.Profiles.Domain.Model.ValueObjects.EmailAddress", "Email", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("email_address");

                            b1.HasKey("Id")
                                .HasName("p_k_profiles");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("Id")
                                .HasConstraintName("f_k_profiles_profiles_id");
                        });

                    b.OwnsOne("OsitoPolarPlatform.API.Profiles.Domain.Model.ValueObjects.PersonName", "Name", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("last_name");

                            b1.HasKey("Id")
                                .HasName("p_k_profiles");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("Id")
                                .HasConstraintName("f_k_profiles_profiles_id");
                        });

                    b.OwnsOne("OsitoPolarPlatform.API.Profiles.Domain.Model.ValueObjects.StreetAddress", "Address", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("address_country");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("address_number");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("address_postal_code");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("address_street");

                            b1.HasKey("Id")
                                .HasName("p_k_profiles");

                            b1.ToTable("profiles");

                            b1.WithOwner()
                                .HasForeignKey("Id")
                                .HasConstraintName("f_k_profiles_profiles_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.ServiceRequests.Domain.Model.Aggregates.ServiceRequest", b =>
                {
                    b.HasOne("OsitoPolarPlatform.API.bc_technicians.Domain.Model.Entities.Technician", null)
                        .WithMany()
                        .HasForeignKey("AssignedTechnicianId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_service_requests__technician_assigned_technician_id");

                    b.HasOne("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.Aggregates.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_service_requests_equipment_equipment_id");
                });

            modelBuilder.Entity("OsitoPolarPlatform.API.WorkOrders.Domain.Model.Aggregates.WorkOrder", b =>
                {
                    b.HasOne("OsitoPolarPlatform.API.bc_technicians.Domain.Model.Entities.Technician", null)
                        .WithMany()
                        .HasForeignKey("AssignedTechnicianId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_work_orders__technician_assigned_technician_id");

                    b.HasOne("OsitoPolarPlatform.API.EquipmentManagement.Domain.Model.Aggregates.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_work_orders_equipment_equipment_id");

                    b.HasOne("OsitoPolarPlatform.API.ServiceRequests.Domain.Model.Aggregates.ServiceRequest", null)
                        .WithMany()
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("f_k_work_orders_service_requests_service_request_id");
                });
#pragma warning restore 612, 618
        }
    }
}
